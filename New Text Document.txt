import logging
import os
import speech_recognition as sr
import openai
from gtts import gTTS
from pydub import AudioSegment
from pydub.playback import play
import requests
import threading

# Set environment variables for PulseAudio and D-Bus
os.environ['PULSE_RUNTIME_PATH'] = '/run/user/1000/pulse/'
os.environ['DBUS_SESSION_BUS_ADDRESS'] = 'unix:path=/run/user/1000/bus'

# Konfigurasi logging
logging.basicConfig(filename='/home/benta/CHAT-GPT-AI-VOICE-ASSISTANT/log.txt', level=logging.INFO)
logging.info('Skrip dijalankan pada startup.')

# Inisialisasi
listening = True

# Pesan "device ready"
device_ready_message = "Device siap digunakan."
tts_ready = gTTS(device_ready_message, lang='id')
tts_ready.save("/home/benta/device_ready.mp3")
sound_ready = AudioSegment.from_mp3("/home/benta/device_ready.mp3")
play(sound_ready)

# Set your OpenAI API key and customize the ChatGPT role
openai.api_key = "sk-proj-ljB7Fiuo9Y9o47GqlateT3BlbkFJJQ4jeCIfOKybH7MazwFH"
messages = [{"role": "system", "content": "Your name is Benta and give answers in 2 lines"}]

def get_response(user_input):
    messages.append({"role": "user", "content": user_input})
    response = openai.ChatCompletion.create(
        model="gpt-4-turbo",
        messages=messages
    )
    ChatGPT_reply = response["choices"][0]["message"]["content"]
    messages.append({"role": "assistant", "content": ChatGPT_reply})
    return ChatGPT_reply

def fetch_data():
    try:
        response = requests.get("https://benta.biz.id/view.php")
        response.raise_for_status()
        return response.text
    except requests.RequestException as e:
        logging.error(f"Error fetching data: {e}")
        return None

def process_data(data):
    try:
        messages = data.split(',')
        logging.info("Data fetched successfully.")
        
        emotion = messages[messages.index('emotion') + 1]
        logging.info(f"Emotion: {emotion}")
        
        if emotion == 'neutral':
            message = "Sepertinya kamu sedang baik baik saja."
        elif emotion == 'happy':
            message = "Emosi yang terdeteksi adalah senang."
        elif emotion == 'sad':
            message = "Emosi yang terdeteksi adalah sedih."
        elif emotion == 'angry':
            message = "Emosi yang terdeteksi adalah marah."
        elif emotion == 'fearful':
            message = "Emosi yang terdeteksi adalah takut."
        elif emotion == 'disgusted':
            message = "Emosi yang terdeteksi adalah jijik."
        elif emotion == 'surprised':
            message = "Emosi yang terdeteksi adalah terkejut."
        else:
            message = "Tidak ada emosi yang terdeteksi. Tolong menghadap ke kamera."
        
        tts = gTTS(message, lang='id')
        tts.save("/home/benta/emotion.mp3")
        
        sound = AudioSegment.from_mp3("/home/benta/emotion.mp3")
        play(sound)
        logging.info("Audio played successfully.")
        
    except ValueError:
        logging.error("No emotion data found in the fetched message.")
    except Exception as e:
        logging.error(f"Error in processing or playing audio: {e}")

def listen_and_respond():
    global listening
    with sr.Microphone() as source:
        recognizer = sr.Recognizer()
        recognizer.adjust_for_ambient_noise(source)
        recognizer.dynamic_energy_threshold = 2500  # Lebih rendah
        recognizer.pause_threshold = 0.8  # Lebih cepat

        try:
            logging.info("Listening...")
            audio = recognizer.listen(source, timeout=5.0)  # Timeout lebih rendah
            response = recognizer.recognize_google(audio, language='id-ID')
            logging.info(f"Recognized response: {response}")
            
            if "benta" in response.lower() or "bent" in response.lower():
                response_from_openai = get_response(response)
                
                tts = gTTS(response_from_openai, lang='id')
                tts.save("/home/benta/response.mp3")
                
                sound = AudioSegment.from_mp3("/home/benta/response.mp3")
                play(sound)
                logging.info("Audio response played.")
            
            elif any(keyword in response.lower() for keyword in ["emosiku", "emosi ku", "emotiku"]):
                logging.info("Fetching data for 'emosiku'...")
                data = fetch_data()
                if data:
                    threading.Thread(target=process_data, args=(data,)).start()
                else:
                    logging.error("Failed to fetch data.")
            
            else:
                logging.info("Didn't recognize 'Benta' or 'emosiku'.")
        
        except sr.UnknownValueError:
            logging.error("Didn't recognize anything.")
        except sr.WaitTimeoutError:
            logging.error("Listening timeout. Please speak again.")
        except sr.RequestError as e:
            logging.error(f"Could not request results from Google Speech Recognition service; {e}")
        except Exception as e:
            logging.error(f"An unexpected error occurred: {e}")

while listening:
    listen_and_respond()
